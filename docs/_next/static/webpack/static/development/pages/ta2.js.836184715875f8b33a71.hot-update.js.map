{"version":3,"file":"static/webpack/static/development/pages/ta2.js.836184715875f8b33a71.hot-update.js","sources":["webpack:///./pages/ta2.tsx"],"sourcesContent":["import React from 'react';\nimport {Alert, Button, Col, ProgressBar, Row, Table} from 'react-bootstrap';\nimport {Guidance, Title} from '../src/components/text';\nimport {ButtonBox, CustomContainer} from '../src/components/box';\nimport Router from 'next/router';\n\nconst PAN_LEFT_VALUE = -0.9;\nconst PAN_RIGHT_VALUE = 0.9;\nconst CANDIDATE_FREQUENCIES = [250, 500, 1000, 2000, 4000, 8000];\nconst CANDIDATE_GAIN = [0.001, 0.002, 0.003, 0.004, 0.006, 0.01];\nconst GAIN_MAX_VALUE = CANDIDATE_GAIN[CANDIDATE_GAIN.length - 1];\nconst MAX_STEPS = 20;\n\nenum Pan {\n  Left = 'Left',\n  Right = 'Right',\n}\n\ninterface IResult {\n  frequency: number;\n  pan: Pan;\n  volume: number;\n  correct: boolean;\n}\n\ninterface IState {\n  isSideChanged: boolean;\n  step: number;\n  isFinished: boolean;\n  frequency: number;\n  panValue: number;\n  volume: number;\n  results: Array<IResult>;\n  shouldBlockButton: boolean;\n}\n\nclass Ta1 extends React.Component {\n  private audioContext: AudioContext;\n  private oscillator: OscillatorNode;\n  private gainNode: GainNode;\n  private panNode: any;\n  private audioContextHistory: AudioContext[] = [];\n\n  state: IState = {\n    isSideChanged: false,\n    step: 0,\n    isFinished: false,\n    frequency: undefined,\n    panValue: undefined,\n    volume: undefined,\n    results: [],\n    shouldBlockButton: false,\n  };\n\n  componentDidMount(): void {\n    console.log('componentDidMount');\n    this.initAudio();\n    setTimeout(() => {\n      try {\n        this.oscillator.stop();\n      } catch (e) {\n        console.warn(e);\n      }\n      this.oscillator.start();\n    }, 300);\n  }\n\n  private initAudio() {\n    const W = window as any;\n    this.audioContext = new (W.AudioContext || W.webkitAudioContext)();\n    this.audioContextHistory.push(this.audioContext);\n    this.oscillator = this.audioContext.createOscillator();\n    this.gainNode = this.audioContext.createGain();\n\n    this.oscillator.type = 'sine';\n    this.oscillator.frequency.value = 440;\n\n    if (false && this.audioContext.createStereoPanner) {\n      this.panNode = this.audioContext.createStereoPanner();\n      this.panNode.pan.value = PAN_LEFT_VALUE;\n    } else {\n      this.panNode = this.audioContext.createPanner();\n      this.panNode.panningModel = 'equalpower';\n      this.panNode.setPosition(PAN_LEFT_VALUE < 0 ? -1 : 1, 0, 1 - Math.abs(PAN_LEFT_VALUE < 0 ? -1 : 1));\n    }\n    this.oscillator.connect(this.panNode);\n    // this.panNode.connect(this.gainNode);\n    this.panNode.connect(this.audioContext.destination);\n\n    this.oscillator.connect(this.gainNode);\n    this.gainNode.connect(this.audioContext.destination);\n    this.gainNode.gain.value = GAIN_MAX_VALUE;\n    console.log('this.gainNode.gain.value', this.gainNode.gain.value);\n  }\n\n  componentWillUnmount(): void {\n    console.log('componentWillUnmount');\n    try {\n      this.gainNode.gain.value = 0;\n      this.panNode.pan.value = 0;\n      this.oscillator.disconnect();\n      this.audioContext.close();\n    } catch (err) {\n      console.error('stopAudio error');\n    } finally {\n      this.stopAudio();\n    }\n  }\n\n  private getRandomGain() {\n    return CANDIDATE_GAIN[Math.floor(Math.random() * (CANDIDATE_GAIN.length - 2))];\n  }\n\n  private getRandomFrequency() {\n    return CANDIDATE_FREQUENCIES[Math.floor(Math.random() * CANDIDATE_FREQUENCIES.length)];\n  }\n\n  private stopAudio() {\n    try {\n      this.audioContextHistory.map(async (context) => {\n        try {\n          await context.close()\n        } catch (err) {\n        }\n      });\n    } catch (err) {\n      console.error('stopAudio error');\n    }\n\n    try {\n      // this.audioContextHistory.forEach(async () => await ());\n      this.gainNode.gain.value = 0;\n      this.oscillator.disconnect();\n      this.audioContext.close();\n      this.audioContext = null;\n      this.gainNode = null;\n      this.panNode = null;\n    } catch (err) {\n      console.error('stopAudio error');\n    }\n  }\n\n  private startAudio() {\n    const W = window as any;\n    const frequency = this.getRandomFrequency();\n    const panValue = Math.random() < 0.5 ? PAN_LEFT_VALUE : PAN_RIGHT_VALUE;\n    const volume = this.getRandomGain();\n\n    this.setState({frequency, panValue, volume});\n\n    this.audioContext = new (W.AudioContext || W.webkitAudioContext)();\n    this.audioContextHistory.push(this.audioContext);\n    this.oscillator = this.audioContext.createOscillator();\n    this.gainNode = this.audioContext.createGain();\n\n    this.oscillator.type = 'sine';\n    this.oscillator.frequency.value = frequency;\n\n    if (false && this.audioContext.createStereoPanner) {\n      this.panNode = this.audioContext.createStereoPanner();\n      this.panNode.pan.value = panValue;\n    }\n    else {\n      this.panNode = this.audioContext.createPanner();\n      this.panNode.panningModel = 'equalpower';\n      this.panNode.setPosition(panValue < 0 ? -1 : 1, 0, 1 - Math.abs(panValue < 0 ? -1 : 1));\n    }\n    this.oscillator.connect(this.panNode);\n    this.panNode.connect(this.gainNode);\n\n    this.oscillator.connect(this.gainNode);\n    this.gainNode.connect(this.audioContext.destination);\n    this.gainNode.gain.value = volume;\n\n    console.log('this.oscillator.frequency.value ', this.oscillator.frequency.value);\n    console.log('panValue', panValue);\n    console.log('this.gainNode.gain.value', this.gainNode.gain.value);\n\n    this.oscillator.start();\n  }\n\n  render() {\n    if (this.state.isFinished) {\n      const correctCount = this.state.results.filter(r => r.correct).length;\n      const percent = Math.floor(correctCount / this.state.results.length * 100);\n      console.log('this.state.results.filter(r => r.correct).length', this.state.results.filter(r => r.correct).length);\n      console.log('this.state.results.length', this.state.results.length);\n      console.log('percent', percent);\n\n      return (\n        <div>\n          <CustomContainer className=\"my-3 p-3 bg-white\">\n            <Row>\n              <Col className=\"col-sm-12 mb-5\">\n                <Title>\n                  검사가<br />\n                  <span className=\"text-primary\">종료</span>되었습니다.<br />\n                  꼭 <span className=\"text-primary\">볼륨</span>을<br />\n                  다시 <span className=\"text-primary\">낮춰</span>주세요\n                </Title>\n              </Col>\n            </Row>\n            <Row>\n              <Col className=\"col-sm-12 mb-5\">\n                <Table striped bordered hover>\n                  <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>주파수</th>\n                    <th>소리 크기</th>\n                    <th>방향</th>\n                    <th>O/X</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {this.state.results.map(({frequency, volume, pan, correct}, i) => (\n                    <tr>\n                      <td>{i}</td>\n                      <td>{frequency}</td>\n                      <td>{volume}</td>\n                      <td>{pan}</td>\n                      <td>{correct ? 'O' : 'X'}</td>\n                    </tr>\n                  ))}\n                  </tbody>\n                </Table>\n\n                <Alert variant={percent >= 90 ? 'success' : percent >= 80 ? 'warning' : 'danger'}>\n                  {correctCount}개 맞추셨네요.&nbsp;\n                  {percent >= 90 ? '정상' : percent >= 80 ? '주의' : '위험'} 단계 입니다.\n                </Alert>\n\n                <Row className=\"justify-content-end\">\n                  <Col className=\"col-sm-8 mb-5\">\n                    <Guidance className=\"ml-3 mt-5\">\n                      * 간단한 청력 테스트에 도움을 주는 보조 테스트이며,\n                      전문적인 <span className=\"text-primary\">의료행위를 대체할 수 없습니다.</span>\n                    </Guidance>\n                    <Guidance className=\"ml-3 mt-2\">\n                      * 검사 종료 후 <span className=\"text-primary\">기기의 볼륨</span>을\n                      다시 <span className=\"text-primary\">낮춰주세요.</span>\n                    </Guidance>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </CustomContainer>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <CustomContainer className=\"my-3 p-3 bg-white\">\n          <Row>\n            <Col className=\"col-sm-12 mb-5\">\n              <Title>\n                <span className=\"text-primary\">어느 쪽 귀</span>에서 들리시나요?<br />\n              </Title>\n              #{this.state.step}\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"col-sm-12 mb-5\">\n              <ProgressBar\n                now={this.state.step}\n                min={0}\n                max={MAX_STEPS + 1}\n              />\n            </Col>\n          </Row>\n          <ButtonBox className=\"align-items-end\">\n            <Col className=\"col-12 mt-2 text-center\">\n              <Button\n                className=\"btn-block\"\n                disabled={this.state.shouldBlockButton}\n                onClick={() => this.handleNothing()}\n              >\n                들리지 않음\n              </Button>\n            </Col>\n            <Col className=\"col-12 mt-2 text-center\">\n              <Button\n                className=\"btn-block\"\n                disabled={this.state.shouldBlockButton}\n                onClick={() => this.handleLeft()}\n              >\n                왼쪽\n              </Button>\n            </Col>\n            <Col className=\"col-12 mt-2 text-center\">\n              <Button\n                className=\"btn-block\"\n                disabled={this.state.shouldBlockButton}\n                onClick={() => this.handleRight()}\n              >\n                오른쪽\n              </Button>\n            </Col>\n          </ButtonBox>\n        </CustomContainer>\n      </div>\n    )\n  }\n\n  private saveResult({choice}: { choice?: Pan }) {\n    this.setState((prevState: IState) => {\n      const pan = prevState.panValue < 0 ? Pan.Left: Pan.Right;\n      console.log('prevState.pan', pan);\n      console.log('choice', choice);\n      console.log('prevState.pan === choice', pan === choice);\n\n      const resultOfCurrentStep: IResult = {\n        frequency: prevState.frequency,\n        pan: pan,\n        volume: prevState.volume,\n        correct: prevState.isSideChanged ? pan !== choice : pan === choice,\n      };\n\n      const results = prevState.results.concat([resultOfCurrentStep]);\n      results.sort((e1, e2) => e1.frequency - e2.frequency);\n      return {results};\n    });\n  }\n\n  private goToNextSound() {\n    const {step} = this.state;\n    this.setState({shouldBlockButton: true});\n\n    if (step === MAX_STEPS) {\n      this.finishTest();\n      return;\n    }\n\n    this.setState((prevState: IState) => ({step: prevState.step + 1}));\n    setTimeout(() => this.startAudio(), 1000);\n    setTimeout(() => this.setState({shouldBlockButton: false}), 1500);\n  }\n\n  private finishTest() {\n    this.setState({isFinished: true});\n    setTimeout(() => this.stopAudio(), 500);\n  }\n\n  private handleNothing() {\n    const {step} = this.state;\n\n    this.stopAudio();\n\n    if (step === 0) {\n      Router.push('/wrong?msg=들리지%20않음');\n      return;\n    }\n\n    this.saveResult({choice: undefined});\n    this.goToNextSound();\n  }\n\n  private handleLeft() {\n    const {step} = this.state;\n\n    this.stopAudio();\n\n    if (step === 0) {\n      this.setState({isSideChanged: false, step: 1, shouldBlockButton: true});\n      setTimeout(() => this.startAudio(), 1000);\n      setTimeout(() => this.setState({shouldBlockButton: false}), 1500);\n      return;\n    }\n\n    this.saveResult({choice: Pan.Left});\n    this.goToNextSound();\n  }\n\n  private handleRight() {\n    const {step} = this.state;\n\n    this.stopAudio();\n\n    if (step === 0) {\n      this.setState({isSideChanged: true, step: 1, shouldBlockButton: true});\n      setTimeout(() => this.startAudio(), 1000);\n      setTimeout(() => this.setState({shouldBlockButton: false}), 1500);\n      return;\n    }\n\n    this.saveResult({choice: Pan.Right});\n    this.goToNextSound();\n  }\n}\n\nexport default Ta1;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAsBA;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;;;;;;AAUA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,mBAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,mhWA;AACA;AAkWA;;;;A","sourceRoot":""}